//"field-func" : "function_name:(arguments,,, ...)"
{
    //static data type
    "byte_block_name" : {
        "type" : "identifier of the block(string)(must be byte_block)",
        "size" : "size of the block in bytes(int)(must)",
        "data" : "if does not have so data will be random(int, string,  if the number of bytes is smaller than the size then the rest will be random)(optional)",  
        "endian" : "default little(string)(optional)",
    },

    //dynamic data type
    "range_byte_block_name" : {
        "type" : "identifier of the block(string)(must be range_block)",
        "range": "size of the range of the block(range:[min size(include), max size(not include)])(must)",
        "data" : "if does not have so data will be random(int, bytes:'He\\x23\\x76' if the number of bytes is smaller than the size then the rest will be random)(optional)",
        "endian" : "default little(string)(optional)",
    },

    //dynamic data type
    "str_block_name" : {
        "type" : "identifier of the block(string)(must be str_block)",
        "content" : "content of string, the size depends on the content size(string)(must)",
        "format" : "c-string, pascal-string(string)(must)"
    },

    //static data type
    "bit_block_name" : {
        "type" : "identifier of the block(string)(must be bit_block)",
        "size" : "size of the block in bits(int)(must)",
        "data" : "if does not have so data will be random(bits:'101' if the number of bytes is smaller than the size then the rest will be random)(optional)"
    },

    //static data type
    "multi_bit_block_name" : {
        "type" : "identifier of the block(string)(must be multi_bit_block)",
        "bit_blocks" : "array of bit_block names that will construct a multi_bit_block(must be division of 8 in bits size)(must)"
    },

    //static data type
    "multi_byte_block_name" : {
        "type" : "identifier of the block(string)(must be multi_byte_block)",
        "byte_blocks" : "array of byte_block names that will construct a multi_byte_block(just array)(must)"
    },

    //static data type
    "duplicate_block_name" : {
        "type" : "identifier of the block(string)(must be duplicate_block_block)",
        "block" : "block name for duplication, all types except multi_bit_block(string)(must)",
        "size" : "number of duplication"
    },

    //dynamic data type
    "range_duplicate_block_name" : {
        "type" : "identifier of the block(string)(must be duplicate_block_block)",
        "block" : "block name for duplication, all types except multi_bit_block (string)(must)",
        "range" : "size of the range of the block(range:[min size(include), max size(not include)])(must)",
    },


    "block_choise_name" : {
        "type" : "identifier of the block(string)(must be block_choise)",
        "blocks" : "array of blocks, will choose random block(array)(must)",
    },

    //static data type
    "template_name" : {
        "type" : "identifier of the block(string)(must be template)",
        "blocks" : "array of block of all types except multi_bit_block (array)(must)"
    },

    /////////examples:
    

    "field_1" : {
        "type" : "byte_block",
        "size" : 4,
        "data" : 43
    },

    "field_2" : {
        "type" : "byte_block",
        "size" : 4,
        "data" : "oo", //last two bytes will be random
    },

    "field_3" : {
        "type" : "str_block",
        "content" : "Hello",
        "format" : "c-string" // with null in the end
    },


    "some_bits1" : {
        "type" : "bit_block",
        "size" : "5",
        "data" : "01110"
    },

    "some_bits2" : {
        "type" : "bit_block",
        "size" : "3",
        "data" : "110"
    },

    "field_4" : {
        "type" : "multi_bit_block",
        "bit_blocks" : ["some_bits1", "some_bits2"] //01110110
    },

    "file_format_template" : {
        "type" : "template",
        "blocks" : ["field_1", "field_2", "field_3", "field_4"]
    }
}


ideas to add:


1. big/little endian
2. move to JSON5(hex support)